<%- include('partials/header.ejs') %>

<head>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBebGg0EYJGo98SWvR4hPRZT7VdI5xiHls&callback=initMap"
  type="text/javascript"></script>


    <!-- CSS Styles just for testing -->
    <style type="text/css">
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 50%;
        width: 50%;
        align-content: center;
      }

      /* Optional: Makes the sample page fill the window. */
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    </style>
    <!-- /.styles -->

    <!-- JavaScript code to make the map run -->
    <script>
		let map, infoWindow;

		async function initMap() {

			// Variables
			var userOriginCoords;
			var userOrigin = await getPosition();
			var userDestination = new google.maps.LatLng(37.333868240178184, -121.9031049556756);

			// Creating the Map
		  map = new google.maps.Map(document.getElementById("map"), {
		    center: { lat: -34.397, lng: 150.644 },
		    zoom: 15,
		  });

		  // Creating Info Box
		  infoWindow = new google.maps.InfoWindow();
		  infoWindow.setPosition(userOrigin);
		  infoWindow.setContent("GPS LOCATION!");
		  infoWindow.open(map);
		  map.setCenter(userOrigin);


		  // Try distance
		  var response;
		  var service = new google.maps.DistanceMatrixService();
		  await getDistance(service, userOrigin, userDestination);
		  
		}

// -------------- functions -------------------- // 

		// New function that gets the user's location
		async function getPosition() {
			return new Promise(function(resolve, reject) {
				if (navigator.geolocation) {
			    navigator.geolocation.getCurrentPosition(
			      (position) => {
			        const pos = {
			          lat: position.coords.latitude,
			          lng: position.coords.longitude,
			        };
			        resolve(pos);
			});
			}
			});
	}

		// Distance Function
		async function getDistance(service, userOrigin, userDestination) {
			console.log("getDistance()");
			console.log(userOrigin);
			service.getDistanceMatrix(
				{
				  	origins: [userOrigin],
				  	destinations: [userDestination],
				  	travelMode: 'DRIVING',
					//divingOptions: DrivingOptions,
			  		unitSystem: google.maps.UnitSystem.IMPERIAL,
				  	avoidHighways: true,
				  	avoidTolls: true,
				}, callback);
		}

		// Backup function to handle location errors. Provided by Google. 
		function handleLocationError(browserHasGeolocation, infoWindow, pos) {
		  infoWindow.setPosition(pos);
		  infoWindow.setContent(
		    browserHasGeolocation
		      ? "Error: The Geolocation service failed."
		      : "Error: Your browser doesn't support geolocation."
		  );
		  infoWindow.open(map);
		}

		// Callback function provided by Google. I have no clue how to use this.
		function callback(response, status) {
		console.log(response);
		  if (status == 'OK') {
		    var origins = response.originAddresses;
		    var destinations = response.destinationAddresses;

		    for (var i = 0; i < origins.length; i++) {
		      var results = response.rows[i].elements;
		      for (var j = 0; j < results.length; j++) {
		        var element = results[j];
		        var distance = element.distance.text;
		        var duration = element.duration.text;
		        var from = origins[i];
		        var to = destinations[j];
		      }
		    }
		  }
		}
    </script>
    <!-- /.JavaScript -->

  	<div id="map"></div>
  <div class="container">



  </div>
  <!-- /.container -->
</body>

</html>